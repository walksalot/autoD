name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for changelog generation

    - name: Set up Python 3.9
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Run all tests
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY_TEST }}
        ENVIRONMENT: production
      run: |
        pytest --cov=src --cov-report=term-missing -v

    - name: Verify deployment smoke tests
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY_TEST }}
        ENVIRONMENT: production
      run: |
        pytest tests/test_deployment_validation.py -v --tb=short

    - name: Check version consistency
      run: |
        # Verify version in src/__init__.py matches tag
        PACKAGE_VERSION=$(python -c "import src; print(src.__version__ if hasattr(src, '__version__') else '0.0.0')")
        TAG_VERSION="${GITHUB_REF#refs/tags/v}"
        echo "Package version: $PACKAGE_VERSION"
        echo "Tag version: $TAG_VERSION"
        if [ "$PACKAGE_VERSION" != "$TAG_VERSION" ]; then
          echo "::error::Version mismatch: package=$PACKAGE_VERSION, tag=$TAG_VERSION"
          exit 1
        fi

  build-and-publish:
    name: Build and Publish
    runs-on: ubuntu-latest
    needs: validate-release

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.9
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'

    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install build twine wheel

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        twine check dist/*

    - name: Publish to PyPI
      if: startsWith(github.ref, 'refs/tags/v')
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: dist/*
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-to-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-publish
    environment:
      name: staging
      url: https://staging.example.com

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add deployment steps here (e.g., AWS, GCP, Azure)

    - name: Run smoke tests on staging
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY_STAGING }}
        ENVIRONMENT: staging
      run: |
        echo "Running smoke tests on staging..."
        # Add staging smoke tests here

  deploy-to-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-to-staging
    environment:
      name: production
      url: https://production.example.com

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add production deployment steps here

    - name: Run smoke tests on production
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY_PROD }}
        ENVIRONMENT: production
      run: |
        echo "Running smoke tests on production..."
        # Add production smoke tests here

    - name: Notify deployment success
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: 'âœ… Successfully deployed version ' + context.ref.replace('refs/tags/v', '') + ' to production!'
          })
