name: CI

on:
  push:
    branches: [ main, develop, integration/* ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Lint with black
      run: |
        black --check src/ tests/

    - name: Run tests with coverage
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY_TEST }}
        ENVIRONMENT: development
      run: |
        pytest --cov=src --cov-report=xml --cov-report=term-missing -v

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Check coverage threshold
      run: |
        # Ensure Week 1 modules meet 75%+ coverage target
        pytest --cov=src/cost_calculator --cov=src/retry_logic --cov=src/pipeline --cov=src/stages --cov-report=term --cov-fail-under=75 -q

  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.9
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Verify deployment readiness
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY_TEST }}
        ENVIRONMENT: development
      run: |
        # Run deployment validation smoke tests
        pytest tests/test_deployment_validation.py -v

    - name: Security check
      run: |
        pip install safety
        safety check --json || true

    - name: Type checking
      run: |
        pip install mypy
        mypy src/ --ignore-missing-imports || true

  docker-build:
    name: Docker Build Validation
    runs-on: ubuntu-latest
    needs: [test, quality-gates]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        push: false
        tags: paper-autopilot:ci-${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        # Run basic container smoke test
        docker run --rm paper-autopilot:ci-${{ github.sha }} python -c "import src; print('Import successful')"

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [test, quality-gates, docker-build]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.9
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'

    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install build wheel

    - name: Build package
      run: |
        python -m build

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-packages
        path: dist/
        retention-days: 7
